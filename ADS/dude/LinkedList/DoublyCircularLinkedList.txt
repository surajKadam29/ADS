package linkedlist;

class Node {
    int data;
    Node next;
    Node prev;

    Node(int data) {
        this.data = data;
        this.next = null;
        this.prev = null;
    }

	public int getData() {
		return data;
	}

	public void setData(int data) {
		this.data = data;
	}

	public Node getNext() {
		return next;
	}

	public void setNext(Node next) {
		this.next = next;
	}

	public Node getPrev() {
		return prev;
	}

	public void setPrev(Node prev) {
		this.prev = prev;
	}
    
    
    
}






package linkedlist;

//import org.w3c.dom.Node;

class DoublyCircularLinkedList {
    private Node head;

    DoublyCircularLinkedList() {
        this.head = null;
    }

    // Create: Insert a new node at the end of the list
    void insert(int data) {
        Node newNode = new Node(data);
        if (head == null) {
            head = newNode;
            head.next = head;
            head.prev = head;
        } else {
            Node last = head.prev;
            last.next = newNode;
            newNode.prev = last;
            newNode.next = head;
            head.prev = newNode;
        }
    }

    // Read: Display the elements of the list
    void display() {
        if (head == null) {
            System.out.println("List is empty.");
            return;
        }

        Node current = head;
        do {
            System.out.print(current.data + " ");
            current = current.next;
        } while (current != head);
        System.out.println();
    }

    // Update: Modify the value of a node at a given index
    boolean update(int index, int newData) {
        if (head == null || index < 0) {
            return false;
        }

        Node current = head;
        for (int i = 0; i < index; i++) {
            current = current.next;
            if (current == head) {
                return false; // Index out of bounds
            }
        }

        current.data = newData;
        return true;
    }

    // Delete: Remove a node at a given index
    boolean delete(int index) {
        if (head == null || index < 0) {
            return false;
        }

        Node current = head;
        for (int i = 0; i < index; i++) {
            current = current.next;
            if (current == head) {
                return false; // Index out of bounds
            }
        }

        // Update pointers to remove the node
        Node prevNode = current.prev;
        Node nextNode = current.next;
        prevNode.next = nextNode;
        nextNode.prev = prevNode;

        // Update head if necessary
        if (current == head) {
            head = nextNode;
        }

        return true;
    }
}





package linkedlist;

public class Main {
    public static void main(String[] args) {
        DoublyCircularLinkedList list = new DoublyCircularLinkedList();

        list.insert(10);
        list.insert(20);
        list.insert(30);
        list.insert(40);

        list.display(); // Output: 10 20 30 40

        list.update(2, 35); // Update the element at index 2 to 35
        list.display(); // Output: 10 20 35 40

        list.delete(1); // Delete the element at index 1
        list.display(); // Output: 10 35 40
    }
}


----------------------------------------------------------------------------------------




