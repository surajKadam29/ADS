class Node {
    int data;
    Node next;

    public Node(int data) {
        this.data = data;
        this.next = null;
    }
}

class LinkedListStack {
    private Node top;

    public LinkedListStack() {
        this.top = null;
    }

    public boolean isEmpty() {
        return top == null;
    }

    public void push(int data) {
        Node newNode = new Node(data);
        newNode.next = top;
        top = newNode;
    }

    public int pop() {
        if (isEmpty()) {
            throw new IllegalStateException("Stack is empty. Cannot perform pop operation.");
        }

        int data = top.data;
        top = top.next;
        return data;
    }

    public int peek() {
        if (isEmpty()) {
            throw new IllegalStateException("Stack is empty. Cannot perform peek operation.");
        }
        return top.data;
    }

    public void printStack() {
        Node current = top;
        System.out.print("Stack (top to bottom): ");
        while (current != null) {
            System.out.print(current.data + " ");
            current = current.next;
        }
        System.out.println();
    }
}

public class Main {
    public static void main(String[] args) {
        LinkedListStack stack = new LinkedListStack();

        stack.push(10);
        stack.push(20);
        stack.push(30);

        stack.printStack(); // Output: Stack (top to bottom): 30 20 10

        int poppedElement = stack.pop();
        System.out.println("Popped element: " + poppedElement); // Output: Popped element: 30

        int peekedElement = stack.peek();
        System.out.println("Peeked element: " + peekedElement); // Output: Peeked element: 20

        stack.printStack(); // Output: Stack (top to bottom): 20 10
    }
}
